<?xml version='1.0' encoding='utf-8'?>
<xliff version="1.0">
  <file source-language="en" target-language="de" datatype="plaintext" original="messages" date="Tue Jul 12 18:45:55 UTC 2011" product-name="devlog">
    <header/>
    <body>
      <trans-unit id=".alttitle" approved="yes">
        <source>Developer Log</source>
        <target state="translated">Entwicklerprotokoll</target>
      </trans-unit>
      <trans-unit id=".description" approved="yes">
        <source>The Developer Log extension (devlog) provides logging functionality. It hooks into t3lib_div::devlog() to catch devlog events. A BE module gives an overview of the logged events. For more information read the extension manual, which can be found on typo3.org.</source>
        <target state="translated">Die Erweiterung Entwicklerprotokoll (devlog) stellt Protokollierungsfunktionen zur Verfügung. Sie hängt sich in t3lib_div::devlog() ein, um devlog-Ereignisse abzufangen. Ein BE-Modul bietet eine Übersicht der protokollierten Ereignisse. Weitere Informationen entnehmen Sie bitte der Anleitung der Extension, die bei typo3.org erhältlich ist.</target>
      </trans-unit>
      <trans-unit id=".syntax">
        <source>If you want to make use of the devlog in your extension, simply call the following helper function with the appropriate parameters:
				t3lib_div::devlog($msg, $extKey, $severity = 0, $dataVar = false);

				The parameters are:
				$msg: Main log message (string)
				$extKey: Extension key (from which extension you are calling the log) (string)
				$severity: Severity: 0 is info, 1 is notice, 2 is warning, 3 is fatal error, -1 is "OK" message (integer)
				$dataVar: Additional data you want to pass to the logger (array)
			</source>
      <target></target></trans-unit>
      <trans-unit id="crdate.alttitle" approved="yes">
        <source>Log run time</source>
        <target state="translated">Log-Laufzeit</target>
      </trans-unit>
      <trans-unit id="crdate.description" approved="yes">
        <source>This is the date and time at which the log entry was created.</source>
        <target state="translated">Datum und Zeit, zu denen der Protokolleintrag erstellt wurde.</target>
      </trans-unit>
      <trans-unit id="crdate.details" approved="yes">
        <source>
				All entries corresponding to the code execution are marked with the same date and time. This makes it possible to view them as a consistent group in the BE module. Such a group is called a "log run"
			</source>
        <target state="translated">Alle zur Ausführung des Codes gehörigen Einträge erhalten die gleiche Angabe zu Datum und Zeit. Dadurch es ist möglich, diese im BE-Modul als zusammengehörige Gruppe zu betrachten. Eine solche Gruppe wird "Log Run" genannt.</target>
      </trans-unit>
      <trans-unit id="msg.alttitle" approved="yes">
        <source>Log message</source>
        <target state="translated">Protokollmeldung</target>
      </trans-unit>
      <trans-unit id="msg.description" approved="yes">
        <source>The main message of the log entry.</source>
        <target state="translated">Die Hauptmeldung des Protokolleintrags.</target>
      </trans-unit>
      <trans-unit id="severity.alttitle" approved="yes">
        <source>Severity</source>
        <target state="translated">Schwere</target>
      </trans-unit>
      <trans-unit id="severity.description" approved="yes">
        <source>The severity gives you an impression of how serious the logged event is.</source>
        <target state="translated">Die Bezeichnung Schwere gibt an, wie ernst das protokollierte Ereignis ist.</target>
      </trans-unit>
      <trans-unit id="severity.details">
        <source>
				There are five levels of severity, the higher the number, the more serious the event:
				Ok: These events indicate that everything went fine, no error occurred (at least up to that point where the event was created). No action needs to be taken.
				Info: These events are purely informational. They are normally used for debugging purposes only and require no special action.
				Notice: Abnormal condition, but not blocking. Notices are meant to raise attention. Processes have been completed, but things are not running as smoothly as they could and the condition should be investigated.
				Warning: These events are used to notify significant problems. Processes have been completed, but parts of them may be missing, wrong or corrupted. Warnings should not be ignored and action should definitely be taken.
				Error: These events signal that something went fatally wrong. Processes were not completed and action is definitely needed. Alternately this level may be used to point to a failed event, but in a process where failure can be expected, e.g. a login attempt with the wrong password.
			</source>
      <target></target></trans-unit>
      <trans-unit id="_severity.image">
        <source>EXT:devlog/res/csh_severities.png</source>
      <target></target></trans-unit>
      <trans-unit id="extkey.alttitle" approved="yes">
        <source>Extension</source>
        <target state="translated">Erweiterung</target>
      </trans-unit>
      <trans-unit id="extkey.description" approved="yes">
        <source>The component which triggered the event</source>
        <target state="translated">Die Komponente, die das Ereignis ausgelöst hat.</target>
      </trans-unit>
      <trans-unit id="extkey.details">
        <source>
				The value is either an extension key or a reference to the core itself or some part of it. It depends on the logging implementation of the component which has triggered the event.
				One hint about excluded keys: There's an option in the extension manager to exclude some keys from being logged. Notice that if there were events registered with that key before you excluded it, those events will still be visible in the list.
			</source>
      <target></target></trans-unit>
      <trans-unit id="location.alttitle" approved="yes">
        <source>Call location</source>
        <target state="translated">Aufrufort</target>
      </trans-unit>
      <trans-unit id="location.description" approved="yes">
        <source>The class from which the devLog() call was made, with the line number.</source>
        <target state="translated">Die Klasse, aus der der devLog()-Aufruf erfolgte, einschließlich Zeilennummer.</target>
      </trans-unit>
      <trans-unit id="pid.alttitle" approved="yes">
        <source>Page</source>
        <target state="translated">Seite</target>
      </trans-unit>
      <trans-unit id="pid.description" approved="yes">
        <source>The title of the page which was being processed when the event happened (if any). It's also the page where the record is stored.</source>
        <target state="translated">Die Seite, die beim Auftreten des Ereignisses gerade verarbeitet wurde (falls vorhanden). Auch die Seite, auf der der Datensatz gespeichert ist.</target>
      </trans-unit>
      <trans-unit id="pid.details" approved="yes">
        <source>Events can also be found as page records in the web-&gt;list module. Note that events not triggered within a page context are stored at the root of the page tree.</source>
        <target state="translated">Ereignisse können auch über das Modul Web&gt;Liste als Seitendatensätze gesucht werden. Nicht in einem Seitenkontext ausgelöste Ereignisse werden in der Wurzel des Seitenbaums gespeichert.</target>
      </trans-unit>
      <trans-unit id="cruser_id.alttitle" approved="yes">
        <source>User</source>
        <target state="translated">Benutzer</target>
      </trans-unit>
      <trans-unit id="cruser_id.description" approved="yes">
        <source>The BE user which was logged in the backend and triggered the event (if any).</source>
        <target state="translated">Der BE-Benutzer, der im Backend angemeldet war, als das Ereignis ausgelöst wurde (falls vorhanden).</target>
      </trans-unit>
      <trans-unit id="cruser_id.details" approved="yes">
        <source>This field is useful, if multiple BE users are triggering events at the same time, on the same pages or with the same components.</source>
        <target state="translated">Dieses Feld ist hilfreich, wenn mehrere BE-Benutzer Ereignisse zur selben Zeit, auf den selben Seiten oder mit den selben Komponenten auslösen.</target>
      </trans-unit>
      <trans-unit id="data_var.alttitle" approved="yes">
        <source>Extra data</source>
        <target state="translated">Zusatzdaten</target>
      </trans-unit>
      <trans-unit id="data_var.description" approved="yes">
        <source>Extra data can provide an array with detailed information about the circumstances of the event.</source>
        <target state="translated">Über Zusatzdaten kann ein Array mit detaillierten Informationen über die Umstände des Ereignisses zur Verfügung gestellt werden.</target>
      </trans-unit>
      <trans-unit id="data_var.details">
        <source>
				There are almost no boundaries for this field, except that it is an array. In many cases, this field can contain the processed data, when the event has been triggered. For example, you could get the full stack debug trace when there is an SQL error. Another showcase would be to deliver be the relevant TS setup parts or any other configuration array.
				The value depends on the logging implementation of the component which has triggered the event.
			</source>
      <target></target></trans-unit>
    </body>
  </file>
</xliff>
